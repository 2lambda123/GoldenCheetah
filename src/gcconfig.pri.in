# To build, copy this file to gcconfig.pri and then fill in the paths to your
# local installs of Boost and srmio in the copy.  If you don't want
# support for SRM downloads, just comment out the SRMIO_INSTALL line, but make
# sure you have installed a version of srmio with PCIV/7 support (please
# check http://www.zuto.de/project/srmio/ or build from  git://github.com/rclasen/srmio.git

BOOST_INSTALL = /usr/local/boost
SRMIO_INSTALL = /usr/local/srmio
D2XX_INCLUDE = /usr/local/include/D2XX

# We use g++ on all platforms so switch on
# auto vectorization amongst other things to
# speed up looping over ride file points
#QMAKE_CXXFLAGS += -O3

#let us know where flex/bison are:
#QMAKE_LEX  = flex
#QMAKE_YACC = bison
#win32 {
#  QMAKE_YACC = bison --file-prefix=y -t
#  QMAKE_MOVE = cmd /c move
#  QMAKE_DEL_FILE = rm -f
#}

#if you have PHONON compiled in and working
#uncomment the below, for video playback support
#in the training and racing view
#GC_HAVE_PHONON = true

# If you want Twitter support you must install liboauth
# http://liboauth.sourceforge.net/
# Set the path to where liboauth.a was installed
# By default it will have been installed like this:
#
#LIBOAUTH_INSTALL = /usr/local
#LIBCRYPTO_INSTALL = -lcrypto
#LIBCURL_INSTALL=-lcurl
#LIBZ_INSTALL=-lz

# If you want 3D plotting, you need to install qwtplot3d
#
#  http://qwtplot3d.sourceforge.net/
#
#  If you are running Linux and have font problems, download
#  the Tar ball from http://qwtplot3d.svn.sourceforge.net/viewvc/qwtplot3d/
#  Follow Branches -> Maintain_0_2_x -> qwtplot3d
#
## then set the following variable appropriately:

#QWT3D_INSTALL = /usr/local/qwtplot3d

# If you want TrainingPeaks.com upload/download you need
# to install the Qt Soap add-on
#
#  http://qt.nokia.com/products/appdev/add-on-products/catalog/4/Utilities/qtsoap
#
# then set the following variable appropriately:
#QTSOAP_INSTALL = /usr/local/qtsoap-2.7_1-opensource/

# If you want support for Google Earth .kml files then you need
# to install the Google libkml library
#
# http://code.google.com/p/libkml/
# or on Linux sudo apt-get install libkml-dev
#
# then set the following variable appropriately
# to the root of the libs/includ path
#KML_INSTALL = /usr/local

# If you want support for Downloading iCal calendars
# you will need to install libical
#
# http://sourceforge.net/projects/freeassociation/
#
# then set the following variable appropriately
# to the root of the libs/includ path
#ICAL_INSTALL = /usr/local/libical

# ** note this is only required on windows, on Mac and Linux
# ** the USB stick is presented as a serial device.
# If you want support for using USB1 sticks in realtime
# then install the SiLabs USBXpress development kit
# from http://www.silabs.com/products/mcu/Pages/USBXpress.aspx
# and set the following to the 'Host' directory within the
# SDK, the value below is correct if you install using the default
# pathname (SiLabs in your root directory)
#USBXPRESS_INSTALL=/c/SiLabs/MCU/USBXpress/USBXpress_API/Host/

# ** note this is also only required on windowsto work with
# ** Garmin USB2 sticks whose driver uses libusb-win32.
# You must make sure you install v0.1.12.2 of libusb-win from:
# http://sourceforge.net/projects/libusb-win32/files/libusb-win32-releases/0.1.12.2/
#LIBUSB_INSTALL=/c/libusb-win32-device-bin-0.1.12.2

# if you want video playback on training mode then
# download and install vlc (videolan) from
# ftp.videolan.org/pub/vlc/1.1.8 for your platform
# there are sdks for Mac and Windows. On Linux you
# will need to use the latest distro (e.g. Meerkat
# on Ubuntu) to be sure apt-get installs the latest
# builds (we need 1.1.6 or higher).
# e.g. LINUX
#VLC_INSTALL = /usr/include/vlc/
# e.g. WINDOWS
#VLC_INSTALL = /c/GC/vlc-1.1.8/sdk

# We recommend a debug build for development, and a static build for releases.
CONFIG += debug
#CONFIG += static

# Edit these paths only if you have a Boost/srmio install that uses
# a non-standard directory layout.

BOOST_INCLUDE = $${BOOST_INSTALL}/include

!isEmpty( SRMIO_INSTALL ) {
    SRMIO_INCLUDE = $${SRMIO_INSTALL}/include
    SRMIO_LIB = $${SRMIO_INSTALL}/lib/libsrmio.a
}

macx {
    # Uncomment this line to build with OS X Tiger support on a Leopard system:
    #QMAKE_MAC_SDK=/Developer/SDKs/MacOSX10.4u.sdk

    # Uncomment this line to build a OS X universal binary:
    #CONFIG+=x86 ppc
}

