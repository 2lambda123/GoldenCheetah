/*
 * Interface wrapper code.
 *
 * Generated by SIP 4.19.6
 */

#include "sipAPIgoldencheetah.h"

#line 22 "goldencheetah.sip"
#include "Bindings.h"
#line 12 "./sipgoldencheetahBindings.cpp"

#line 6 "goldencheetah.sip"
#include <qstring.h>
#line 16 "./sipgoldencheetahBindings.cpp"


extern "C" {static PyObject *meth_Bindings_threadid(PyObject *, PyObject *);}
static PyObject *meth_Bindings_threadid(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::Bindings *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_Bindings, &sipCpp))
        {
            long sipRes;

            sipRes = sipCpp->threadid();

            return PyLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_Bindings, sipName_threadid, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_Bindings_athlete(PyObject *, PyObject *);}
static PyObject *meth_Bindings_athlete(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::Bindings *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_Bindings, &sipCpp))
        {
             ::QString*sipRes;

            sipRes = new  ::QString(sipCpp->athlete());

            return sipConvertFromNewType(sipRes,sipType_QString,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_Bindings, sipName_athlete, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_Bindings_build(PyObject *, PyObject *);}
static PyObject *meth_Bindings_build(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::Bindings *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_Bindings, &sipCpp))
        {
            int sipRes;

            sipRes = sipCpp->build();

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_Bindings, sipName_build, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_Bindings_version(PyObject *, PyObject *);}
static PyObject *meth_Bindings_version(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::Bindings *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_Bindings, &sipCpp))
        {
             ::QString*sipRes;

            sipRes = new  ::QString(sipCpp->version());

            return sipConvertFromNewType(sipRes,sipType_QString,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_Bindings, sipName_version, NULL);

    return NULL;
}


/* Call the instance's destructor. */
extern "C" {static void release_Bindings(void *, int);}
static void release_Bindings(void *sipCppV, int)
{
    delete reinterpret_cast< ::Bindings *>(sipCppV);
}


extern "C" {static void assign_Bindings(void *, SIP_SSIZE_T, void *);}
static void assign_Bindings(void *sipDst, SIP_SSIZE_T sipDstIdx, void *sipSrc)
{
    reinterpret_cast< ::Bindings *>(sipDst)[sipDstIdx] = *reinterpret_cast< ::Bindings *>(sipSrc);
}


extern "C" {static void *array_Bindings(SIP_SSIZE_T);}
static void *array_Bindings(SIP_SSIZE_T sipNrElem)
{
    return new  ::Bindings[sipNrElem];
}


extern "C" {static void *copy_Bindings(const void *, SIP_SSIZE_T);}
static void *copy_Bindings(const void *sipSrc, SIP_SSIZE_T sipSrcIdx)
{
    return new  ::Bindings(reinterpret_cast<const  ::Bindings *>(sipSrc)[sipSrcIdx]);
}


extern "C" {static void dealloc_Bindings(sipSimpleWrapper *);}
static void dealloc_Bindings(sipSimpleWrapper *sipSelf)
{
    if (sipIsOwnedByPython(sipSelf))
    {
        release_Bindings(sipGetAddress(sipSelf), 0);
    }
}


extern "C" {static void *init_type_Bindings(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_Bindings(sipSimpleWrapper *, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **, PyObject **sipParseErr)
{
     ::Bindings *sipCpp = 0;

    {
        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, NULL, sipUnused, ""))
        {
            sipCpp = new  ::Bindings();

            return sipCpp;
        }
    }

    {
        const  ::Bindings* a0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, NULL, sipUnused, "J9", sipType_Bindings, &a0))
        {
            sipCpp = new  ::Bindings(*a0);

            return sipCpp;
        }
    }

    return NULL;
}


static PyMethodDef methods_Bindings[] = {
    {SIP_MLNAME_CAST(sipName_athlete), meth_Bindings_athlete, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_build), meth_Bindings_build, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_threadid), meth_Bindings_threadid, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_version), meth_Bindings_version, METH_VARARGS, NULL}
};


sipClassTypeDef sipTypeDef_goldencheetah_Bindings = {
    {
        -1,
        0,
        0,
        SIP_TYPE_CLASS,
        sipNameNr_Bindings,
        {0},
        0
    },
    {
        sipNameNr_Bindings,
        {0, 0, 1},
        4, methods_Bindings,
        0, 0,
        0, 0,
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    },
    0,
    -1,
    -1,
    0,
    0,
    init_type_Bindings,
    0,
    0,
#if PY_MAJOR_VERSION >= 3
    0,
    0,
#else
    0,
    0,
    0,
    0,
#endif
    dealloc_Bindings,
    assign_Bindings,
    array_Bindings,
    copy_Bindings,
    release_Bindings,
    0,
    0,
    0,
    0,
    0,
    0,
    0
};
